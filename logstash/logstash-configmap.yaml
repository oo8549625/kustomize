apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  labels:
    app.kubernetes.io/name: elasticsearch-logstash
    app.kubernetes.io/component: logstash
data:
  logstash.yml: |
    http.host: 0.0.0.0
    pipeline.ecs_compatibility: disabled
  pipelines.yml: |
    - pipeline.id: logstash
      path.config: "/usr/share/logstash/pipeline/logstash.conf"
 
  log4j2.properties: |
    logger.logstashpipeline.name = logstash.inputs.beats
    logger.logstashpipeline.level = error
 
---
 
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipeline
  labels:
    app.kubernetes.io/name: elasticsearch-logstash
    app.kubernetes.io/component: logstash
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }
    filter {
      if [log][file][path] =~ "/var/log/containers/apisix-*_apisix_apisix-*" {
        grok {
          match => { "message" => "%{IP:remote} %{DATA:host} %{USERNAME:user} \[%{HTTPDATE:timestamp}\] %{HOSTNAME:http_host} \"%{WORD:method} %{URIPATHPARAM:path} HTTP/.+\" %{NUMBER:code} %{NUMBER:size} %{NUMBER:request_time} \"%{DATA:referrer}\" \"%{DATA:agent}\" %{DATA:upstream_addr} %{NUMBER:upstream_status} %{NUMBER:upstream_response_time} \"%{DATA:upstream_http_referer}\"" }
        }
        date {
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
      }
    }
    output {
      elasticsearch {
        index => "logstash-%{+YYYY.MM.dd}"
        hosts => [ "${ES_HOSTS}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        cacert => '/etc/logstash/certificates/ca.crt'
      }
      if [log][file][path] =~ "/var/log/containers/apisix-*_apisix_apisix-*" {
        index => "logstashapisix-%{+YYYY.MM.dd}"
        hosts => [ "${ES_HOSTS}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        cacert => '/etc/logstash/certificates/ca.crt'
      }
    }